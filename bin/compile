#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

### Constants

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies

source "$BP_DIR/lib/output.sh"
source "$BP_DIR/lib/environment.sh"
source "$BP_DIR/lib/failure.sh"
source "$BP_DIR/lib/binaries.sh"
source "$BP_DIR/lib/json.sh"
source "$BP_DIR/lib/cache.sh"
source "$BP_DIR/lib/dependencies.sh"
source "$BP_DIR/lib/plugin.sh"

export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

### Handle errors

handle_failure() {
  header "Build failed"
  fail_node_install "$LOG_FILE" "$BUILD_DIR"
  fail_invalid_semver "$LOG_FILE"
  warn_aws_proxy "$BUILD_DIR"
  warn_missing_devdeps "$LOG_FILE" "$BUILD_DIR"
  warn_econnreset "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR


### Failures that should be caught immediately

fail_prebuilt "$BUILD_DIR"
fail_no_nx_workspace "$BUILD_DIR"
fail_dot_heroku "$BUILD_DIR"
fail_dot_heroku_node "$BUILD_DIR"
fail_invalid_package_json "$BUILD_DIR"
fail_multiple_lockfiles "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment" | output "$LOG_FILE"

mkdir -p "$BUILD_DIR/.heroku/node/"
cd "$BUILD_DIR"
# can't pipe the whole thing because piping causes subshells, preventing exports
create_env
list_node_config | output "$LOG_FILE"
create_build_env

install_bins() {
  local node_engine npm_engine yarn_engine npm_version node_version

  node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")
  pnpm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.pnpm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo "engines.pnpm (package.json):  ${pnpm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"

  install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  install_pnpm "$pnpm_engine"
  install_nx
}

header "Installing binaries" | output "$LOG_FILE"
install_bins | output "$LOG_FILE"


find /



APP_NX_PROJECT="$(cat "${ENV_DIR}/APP_NX_PROJECT")"
if [ -z "${APP_NX_PROJECT}" ] ; then
    header "Build failed"
    error "APP_NX_PROJECT must be defined in the application environment and non-empty. Aborting"
    fail
fi

if [ -z "${AFFECTED}" ] ; then
    warn "Terminating deployment of an uninteresting change. Project: ${APP_NX_PROJECT} is not affected."
    fail
fi

restore_cache() {
  local cache_status="$(get_cache_status "$CACHE_DIR")"

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because NODE_MODULES_CACHE=${NODE_MODULES_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    echo "Cached directories were not restored due to a change in version of node, npm, yarn or stack"
    echo "Module installation may take longer for this build"
  else
    # No cache exists, be silent
    :
  fi
}

restore_cache | output "$LOG_FILE"

build_dependencies() {
  local cache_status start
  pnpm_node_modules "$BUILD_DIR"
  nx build "${APP_NX_PROJECT}"
}

header "Installing dependencies" | output "$LOG_FILE"
build_dependencies | output "$LOG_FILE"

cache_build() {
  clear_cache "$CACHE_DIR"
  if ! ${NODE_MODULES_CACHE:-true}; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  else
    header "Caching build"
    save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
  fi
  save_signature "$CACHE_DIR"
}

prune_devdependencies() {
  pnpm_prune_devdependencies "$BUILD_DIR"
}

cache_build | output "$LOG_FILE"
header "Pruning devDependencies" | output "$LOG_FILE"
prune_devdependencies | output "$LOG_FILE"

summarize_build() {
  if $NODE_VERBOSE; then
    list_dependencies "$BUILD_DIR"
  fi
}

install_plugin "$BP_DIR" "$BUILD_DIR"

header "Build succeeded!" | output "$LOG_FILE"
summarize_build | output "$LOG_FILE"

warn_no_start "$BUILD_DIR"
warn_unmet_dep "$LOG_FILE"
